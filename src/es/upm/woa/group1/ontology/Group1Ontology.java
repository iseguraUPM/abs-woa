// file: Group1Ontology.java generated by ontology bean generator.  DO NOT EDIT, UNLESS YOU ARE REALLY SURE WHAT YOU ARE DOING!
package es.upm.woa.group1.ontology;

import jade.content.onto.*;
import jade.content.schema.*;
import jade.util.leap.HashMap;
import jade.content.lang.Codec;
import jade.core.CaseInsensitiveString;

/** file: Group1Ontology.java
 * @author ontology bean generator
 * @version 2019/05/21, 12:23:48
 */
public class Group1Ontology extends jade.content.onto.Ontology  {
  //NAME
  public static final String ONTOLOGY_NAME = "Group1";
  // The singleton instance of this ontology
  private static ReflectiveIntrospector introspect = new ReflectiveIntrospector();
  private static Ontology theInstance = new Group1Ontology();
  public static Ontology getInstance() {
     return theInstance;
  }


   // VOCABULARY
    public static final String WHEREAMI_XPOSITION="xPosition";
    public static final String WHEREAMI_YPOSITION="yPosition";
    public static final String WHEREAMI="WhereAmI";
    public static final String NOTIFYUNITOWNERSHIP="NotifyUnitOwnership";
    public static final String FEEDBACKUNITSTATUS="FeedbackUnitStatus";
    public static final String ASSIGNSTRATEGY="AssignStrategy";
    public static final String SHAREMAPDATA="ShareMapData";

  /**
   * Constructor
  */
  private Group1Ontology(){ 
    super(ONTOLOGY_NAME, BasicOntology.getInstance());
    try { 

    // adding Concept(s)

    // adding AgentAction(s)
    AgentActionSchema shareMapDataSchema = new AgentActionSchema(SHAREMAPDATA);
    add(shareMapDataSchema, es.upm.woa.group1.ontology.ShareMapData.class);
    AgentActionSchema assignStrategySchema = new AgentActionSchema(ASSIGNSTRATEGY);
    add(assignStrategySchema, es.upm.woa.group1.ontology.AssignStrategy.class);
    AgentActionSchema feedbackUnitStatusSchema = new AgentActionSchema(FEEDBACKUNITSTATUS);
    add(feedbackUnitStatusSchema, es.upm.woa.group1.ontology.FeedbackUnitStatus.class);
    AgentActionSchema notifyUnitOwnershipSchema = new AgentActionSchema(NOTIFYUNITOWNERSHIP);
    add(notifyUnitOwnershipSchema, es.upm.woa.group1.ontology.NotifyUnitOwnership.class);
    AgentActionSchema whereAmISchema = new AgentActionSchema(WHEREAMI);
    add(whereAmISchema, es.upm.woa.group1.ontology.WhereAmI.class);

    // adding AID(s)

    // adding Predicate(s)


    // adding fields
    whereAmISchema.add(WHEREAMI_YPOSITION, (TermSchema)getSchema(BasicOntology.INTEGER), ObjectSchema.MANDATORY);
    whereAmISchema.add(WHEREAMI_XPOSITION, (TermSchema)getSchema(BasicOntology.INTEGER), ObjectSchema.MANDATORY);

    // adding name mappings

    // adding inheritance

   }catch (java.lang.Exception e) {e.printStackTrace();}
  }
  }
