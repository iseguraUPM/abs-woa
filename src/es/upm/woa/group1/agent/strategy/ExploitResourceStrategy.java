/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package es.upm.woa.group1.agent.strategy;

import es.upm.woa.group1.WoaDefinitions;
import es.upm.woa.group1.agent.ExploitResourceRequestHandler;
import es.upm.woa.group1.agent.WoaAgent;
import es.upm.woa.group1.map.CellTranslation;
import es.upm.woa.group1.map.finder.LocationFinder;
import es.upm.woa.group1.map.MapCell;
import es.upm.woa.group1.map.PathfinderGameMap;
import es.upm.woa.group1.map.finder.FarmResourceEvaluator;
import es.upm.woa.group1.map.finder.ForestResourceEvaluator;
import es.upm.woa.group1.map.finder.OreResourceEvaluator;
import es.upm.woa.group1.protocol.CommunicationStandard;
import es.upm.woa.group1.protocol.Conversation;

import es.upm.woa.ontology.ExploitResource;
import es.upm.woa.ontology.GainedResource;
import es.upm.woa.ontology.GameOntology;

import jade.content.ContentElement;
import jade.content.lang.Codec;
import jade.content.onto.OntologyException;
import jade.content.onto.basic.Action;
import jade.core.AID;
import jade.lang.acl.ACLMessage;
import java.util.ArrayList;
import java.util.Collection;

import java.util.List;
import java.util.logging.Level;

/**
 *
 * @author ISU
 */
class ExploitResourceStrategy extends Strategy {

    private final WoaAgent woaAgent;
    private final CommunicationStandard comStandard;
    private final PathfinderGameMap graphKnownMap;
    private final AID worldAID;
    private final int priority;

    private final String resourceType;
    private final LocationFinder locationFinder;

    private final PositionedAgentUnit agentUnit;
    private final ExploitResourceRequestHandler exploitResourceRequestHandler;

    private boolean finishedRound;
    private boolean finishedExploitation;

    ExploitResourceStrategy(int priority, WoaAgent agent,
            CommunicationStandard comStandard,
            PathfinderGameMap graphGameMap, AID worldAID,
            PositionedAgentUnit agentUnit, String resourceType,
            ExploitResourceRequestHandler exploitResourceRequestHandler,
            LocationFinder locationFinder) {
        super(agent);
        this.woaAgent = agent;
        this.comStandard = comStandard;
        this.graphKnownMap = graphGameMap;
        this.worldAID = worldAID;
        this.resourceType = resourceType;
        this.locationFinder = locationFinder;
        this.agentUnit = agentUnit;
        this.exploitResourceRequestHandler = exploitResourceRequestHandler;

        this.priority = priority;
        this.finishedRound = false;
        this.finishedExploitation = false;
    }

    @Override
    public int getPriority() {
        return priority;
    }

    @Override
    public boolean isOneShot() {
        return finishedExploitation;
    }

    @Override
    public void action() {
        block();
    }

    private void exploitResource() {
        startExploitResourceBehaviour(new OnExploitedResourceHandler() {
            @Override
            public void onExploitedResource(Collection<GainedResource> gainedResources) {
                gainedResources.stream().forEach(resource -> {
                    gainResource(resource.getResourceName(), resource.getAmount());
                });

                finishStrategy();
            }

            @Override
            public void onErrorExploitingResource() {
                finishStrategy();
            }

            private void gainResource(String resourceName, int amount) {
                switch (resourceName) {
                    case WoaDefinitions.FOOD:
                        exploitResourceRequestHandler.onGainedFood(amount);
                        break;
                    case WoaDefinitions.GOLD:
                        exploitResourceRequestHandler.onGainedGold(amount);
                        break;
                    case WoaDefinitions.WOOD:
                        exploitResourceRequestHandler.onGainedWood(amount);
                        break;
                    case WoaDefinitions.STONE:
                        exploitResourceRequestHandler.onGainedStone(amount);
                        break;
                    default:
                        woaAgent.log(Level.WARNING, "Unknown exploited resource: " + resourceName);
                        break;
                }
            }
        });
    }

    private void finishStrategy() {
        finishedRound = true;
    }

    @Override
    public boolean done() {
        return finishedRound;
    }

    @Override
    protected void resetStrategy() {
        finishedRound = false;
    }

    @Override
    public void onStart() {
        woaAgent.log(Level.FINE,
                "Starting exploit resource strategy");

        MapCell resourceSite = findCandidateResourceSite();
        if (resourceSite == null) {
            woaAgent.log(Level.WARNING, "Could not find a " + resourceType
                    + " resource site close to "
                    + agentUnit.getCurrentPosition());
            finishStrategy();
            finishedExploitation = true;
            exploitResourceRequestHandler.onFinishedExploiting(resourceType);
            return;
        }

        if (resourceSite.equals(agentUnit.getCurrentPosition())) {
            exploitResource();
        } else {
            moveToResourceSite(resourceSite, new OnArrivedToResourceSiteHandler() {
                @Override
                public void onArrivedToResourceSite() {
                    exploitResource();
                }

                @Override
                public void onCouldntArriveToResourceSite() {
                    finishStrategy();
                }
            });
        }
    }

    private void moveToResourceSite(MapCell location, OnArrivedToResourceSiteHandler handler) {
        List<CellTranslation> pathToResourceSite
                = findShortestPathToLocation(location);

        startFollowPathBehaviour(pathToResourceSite, handler);
    }

    private void startFollowPathBehaviour(List<CellTranslation> pathToTownHall,
            OnArrivedToResourceSiteHandler handler) {
        woaAgent.addBehaviour(new FollowPathBehaviour(woaAgent, comStandard,
                worldAID, agentUnit, pathToTownHall) {
            @Override
            protected void onArrived(CellTranslation direction, MapCell destination) {
                agentUnit.updateCurrentPosition(direction, destination);
                woaAgent.log(Level.FINER, "Arrived to resource site at: "
                        + destination);
                handler.onArrivedToResourceSite();
            }

            @Override
            protected void onStep(CellTranslation direction, MapCell currentCell) {
                agentUnit.updateCurrentPosition(direction, currentCell);
                woaAgent.log(Level.FINER, "Moving towards resource site from: "
                        + currentCell);
            }

            @Override
            protected void onStuck(MapCell currentCell) {
                woaAgent.log(Level.FINER, "Cannot move towards resource site"
                        + " from: " + currentCell);

                handler.onCouldntArriveToResourceSite();
            }

            @Override
            protected void onMoveError(String msg) {
                woaAgent.log(Level.FINE, "Error while moving towards"
                        + " resource site (" + msg + ")");

                handler.onCouldntArriveToResourceSite();
            }
        });
    }

    private List<CellTranslation> findShortestPathToLocation(MapCell location) {
        List<CellTranslation> shortestPath
                = graphKnownMap.findShortestPath(agentUnit.getCurrentPosition(),
                         location);

        return shortestPath;
    }

    private void startExploitResourceBehaviour(OnExploitedResourceHandler handler) {
        ExploitResource exploitResource = new ExploitResource();

        Action exploitResourceAction = new Action(woaAgent.getAID(), exploitResource);
        woaAgent.addBehaviour(new Conversation(woaAgent, comStandard,
                GameOntology.EXPLOITRESOURCE) {
            @Override
            public void onStart() {
                woaAgent.log(Level.FINER, "Wants to exploit " + resourceType);

                sendMessage(worldAID, ACLMessage.REQUEST,
                        exploitResourceAction, new Conversation.SentMessageHandler() {

                    @Override
                    public void onSent(String conversationID) {

                        receiveResponse(conversationID, new Conversation.ResponseHandler() {

                            @Override
                            public void onAgree(ACLMessage response) {
                                woaAgent.log(Level.FINEST, "received ExploitResource agree from "
                                        + response.getSender().getLocalName());

                                receiveResponse(conversationID, new Conversation.ResponseHandler() {

                                    @Override
                                    public void onFailure(ACLMessage response) {
                                        woaAgent.log(Level.WARNING, "received ExploitResource failure from "
                                                + response.getSender().getLocalName());
                                        handler.onErrorExploitingResource();
                                    }

                                    @Override
                                    public void onInform(ACLMessage response) {
                                        woaAgent.log(Level.FINEST, "received ExploitResource inform from "
                                                + response.getSender().getLocalName());

                                        handleExploitResourceInform(response, handler);
                                    }

                                });
                            }

                            @Override
                            public void onNotUnderstood(ACLMessage response) {
                                woaAgent.log(Level.WARNING, "received ExploitResource not understood from "
                                        + response.getSender().getLocalName());
                                handler.onErrorExploitingResource();
                            }

                            @Override
                            public void onRefuse(ACLMessage response) {
                                woaAgent.log(Level.FINER, "receive ExploitResource refuse from "
                                        + response.getSender().getLocalName());
                                handler.onErrorExploitingResource();
                            }

                        });
                    }
                });

            }

        });
    }

    private void handleExploitResourceInform(ACLMessage response,
             OnExploitedResourceHandler handler) {
        try {
            ContentElement content
                    = woaAgent.getContentManager().extractContent(response);
            Action action = (Action) content;
            ExploitResource exploitResource = (ExploitResource) action.getAction();

            Collection<GainedResource> gainedResources = new ArrayList<>();
            for (Object o : exploitResource.getResourceList().toArray()) {
                GainedResource gainedResource = (GainedResource) o;
                woaAgent.log(Level.FINE, "Exploited "
                        + gainedResource.getAmount()
                        + " of " + gainedResource.getResourceName());
                gainedResources.add(gainedResource);

            }

            handler.onExploitedResource(gainedResources);
        } catch (Codec.CodecException | OntologyException ex) {
            woaAgent.log(Level.WARNING, "Could not extract exploited"
                    + " resources message contents");
            handler.onErrorExploitingResource();
        }
    }

    private MapCell findCandidateResourceSite() {
        switch (resourceType) {
            case WoaDefinitions.FOREST:
                return locationFinder.findMatchingSiteCloseTo(agentUnit
                        .getCurrentPosition(),
                        new ForestResourceEvaluator());
            case WoaDefinitions.ORE:
                return locationFinder.findMatchingSiteCloseTo(agentUnit
                        .getCurrentPosition(),
                        new OreResourceEvaluator());
            case WoaDefinitions.FARM:
                return locationFinder.findMatchingSiteCloseTo(agentUnit
                        .getCurrentPosition(),
                        new FarmResourceEvaluator(agentUnit.getTribeAID()));
            default:
                return null;
        }
    }

    private interface OnArrivedToResourceSiteHandler {

        public void onArrivedToResourceSite();

        public void onCouldntArriveToResourceSite();

    }

    private interface OnExploitedResourceHandler {

        public void onExploitedResource(Collection<GainedResource> gainedResources);

        public void onErrorExploitingResource();

    }

}
