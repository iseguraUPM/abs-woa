/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package es.upm.woa.group1.agent.world;

import es.upm.woa.group1.WoaDefinitions;
import es.upm.woa.group1.agent.TransactionRecord;
import es.upm.woa.group1.agent.Tribe;
import es.upm.woa.group1.agent.TribeResources;
import es.upm.woa.group1.agent.Unit;
import es.upm.woa.group1.agent.WoaAgent;
import es.upm.woa.group1.gui.WoaGUI;
import es.upm.woa.group1.map.GameMap;
import es.upm.woa.group1.map.MapCell;
import es.upm.woa.group1.protocol.CommunicationStandard;
import es.upm.woa.group1.protocol.Conversation;
import es.upm.woa.group1.protocol.DelayedTransactionalBehaviour;

import es.upm.woa.ontology.Building;
import es.upm.woa.ontology.ExploitResource;
import es.upm.woa.ontology.GainedResource;
import es.upm.woa.ontology.GameOntology;
import es.upm.woa.ontology.Ground;
import es.upm.woa.ontology.Resource;

import jade.content.onto.basic.Action;
import jade.core.behaviours.Behaviour;
import jade.lang.acl.ACLMessage;
import java.util.ArrayList;
import java.util.List;

import java.util.NoSuchElementException;
import java.util.logging.Level;
import java.util.stream.Collectors;

/**
 *
 * @author juanpamz
 */
public class ExploitResourceBehaviourHelper {

    private static final int EXPLOIT_ORE_TICKS = 8;
    private static final int EXPLOIT_FARM_TICKS = 24;
    private static final int EXPLOIT_FOREST_TICKS = 6;

    private final WoaAgent woaAgent;
    private final CommunicationStandard comStandard;
    private final GameMap worldMap;
    private final WoaGUI gui;

    private final TransactionRecord transactionRecord;
    private final TribeInfomationBroker tribeInfomationBroker;
    private final KnownPositionInformer knownPositionInformer;

    public ExploitResourceBehaviourHelper(WoaAgent woaAgent,
            CommunicationStandard comStandard, GameMap worldMap,
            TransactionRecord activeTransactions,
            WoaGUI gui,
            TribeInfomationBroker tribeInfomationBroker,
            UnitMovementInformer unitMovementInformer,
            CreateUnitBehaviourHelper.UnitCreator unitCreator,
            KnownPositionInformer knownPositionInformer) {
        this.woaAgent = woaAgent;
        this.comStandard = comStandard;
        this.worldMap = worldMap;
        this.transactionRecord = activeTransactions;
        this.gui = gui;
        this.tribeInfomationBroker = tribeInfomationBroker;
        this.knownPositionInformer = knownPositionInformer;
    }

    public Behaviour startExploitResourcesBehaviour() {
        Behaviour newBehaviour = new Conversation(woaAgent, comStandard,
                GameOntology.EXPLOITRESOURCE) {
            @Override
            public void onStart() {

                listenMessages(new Conversation.ResponseHandler() {
                    @Override
                    public void onRequest(ACLMessage message) {
                        final Action exploitResourceAction
                                = new Action(woaAgent.getAID(), new ExploitResource());
                        woaAgent.log(Level.FINER, "received exploit resource request from"
                                + message.getSender().getLocalName());

                        final Tribe ownerTribe = tribeInfomationBroker
                                .findOwnerTribe(message.getSender());
                        Unit requesterUnit = tribeInfomationBroker
                                .findUnit(ownerTribe, message.getSender());
                        if (ownerTribe == null || requesterUnit == null) {
                            respondMessage(message, ACLMessage.REFUSE, exploitResourceAction);
                            return;
                        }
                        
                        if (requesterUnit.isBusy()) {
                            respondMessage(message, ACLMessage.REFUSE, exploitResourceAction);
                            return;
                        }

                        try {
                            MapCell unitPosition = worldMap.getCellAt(requesterUnit
                                    .getCoordX(), requesterUnit.getCoordY());

                            if (!canExploitResource(ownerTribe, requesterUnit,
                                    unitPosition)) {
                                respondMessage(message, ACLMessage.REFUSE, exploitResourceAction);
                            } else {
                                initiateExploitResource(requesterUnit, ownerTribe, unitPosition, message);
                            }

                        } catch (NoSuchElementException ex) {
                            woaAgent.log(Level.WARNING, "Unit "
                                    + requesterUnit.getId().getLocalName() + " is at an unknown position");
                            respondMessage(message, ACLMessage.REFUSE, exploitResourceAction);
                        }
                    }
                });
            }

            private void initiateExploitResource(Unit requesterUnit, Tribe ownerTribe, MapCell unitPosition, ACLMessage message) {
                final Action exploitResourceAction
                        = new Action(woaAgent.getAID(), new ExploitResource());

                respondMessage(message, ACLMessage.AGREE, exploitResourceAction);
                
                gui.startAction(requesterUnit.getId().getLocalName(), WoaGUI.ACTION_EXPLOIT);

                List<GainedResource> gainedResources;

                int exploitResourceTicks;
                if (unitPosition.getContent() instanceof Building) {
                    Building farm = (Building) unitPosition.getContent();
                    exploitResourceTicks = EXPLOIT_FARM_TICKS;
                    gainedResources = computeGainedFood(ownerTribe, farm);
                } else {
                    final Resource resourceCell = (Resource) unitPosition.getContent();

                    if (resourceCell.getResourceType().equals(WoaDefinitions.ORE)) {
                        exploitResourceTicks = EXPLOIT_ORE_TICKS;
                        gainedResources = computeGainedOre(ownerTribe,
                                resourceCell);

                    } else {
                        exploitResourceTicks = EXPLOIT_FOREST_TICKS;
                        gainedResources = computeGainedWood(ownerTribe,
                                resourceCell);
                    }

                    int exploitedResourceQuantity = gainedResources.stream()
                            .map(res -> res.getAmount())
                            .collect(Collectors.summingInt(Integer::intValue));
                    resourceCell.setResourceAmount(resourceCell
                            .getResourceAmount() - exploitedResourceQuantity);
                }

                requesterUnit.setBusy();
                
                DelayedTransactionalBehaviour activeTransaction
                        = createExploitResourceTransaction(exploitResourceTicks,
                                gainedResources, unitPosition, ownerTribe, requesterUnit, message, exploitResourceAction);

                transactionRecord.addTransaction(activeTransaction);
                woaAgent.addBehaviour(activeTransaction);
            }

            private DelayedTransactionalBehaviour createExploitResourceTransaction(int exploitResourceTicks,
                    List<GainedResource> gainedResources, MapCell unitPosition, Tribe ownerTribe, Unit requesterUnit, ACLMessage message, final Action exploitResourceAction) {
                DelayedTransactionalBehaviour activeTransaction
                        = new DelayedTransactionalBehaviour(myAgent, exploitResourceTicks) {

                    boolean finished = false;

                    @Override
                    public boolean done() {
                        return finished;
                    }

                    @Override
                    public void commit() {
                        if (!finished) {
                            Action exploitAction = getExploitAction(gainedResources);
                            depleteResources(unitPosition);
                            gainResources(ownerTribe, requesterUnit, gainedResources);
                            requesterUnit.setFree();
                            respondMessage(message, ACLMessage.INFORM, exploitAction);
                            gui.cancelAction(requesterUnit.getId().getLocalName());
                        }

                        finished = true;
                    }

                    @Override
                    public void rollback() {
                        if (!finished) {
                            returnGainedResources(gainedResources, unitPosition);
                            woaAgent.log(Level.INFO, "Canceled resource"
                                    + " exploitation from "
                                    + message.getSender().getLocalName());
                            requesterUnit.setFree();
                            respondMessage(message, ACLMessage.FAILURE, exploitResourceAction);
                            gui.cancelAction(requesterUnit.getId().getLocalName());
                        }
                        finished = true;
                    }

                };
                return activeTransaction;
            }

        };

        woaAgent.addBehaviour(newBehaviour);

        return newBehaviour;
    }

    private List<GainedResource> computeGainedFood(Tribe tribe, Building farm) {
        List<GainedResource> gainedResourcesList = new ArrayList<>();

        GainedResource gainedFood = new GainedResource();
        gainedFood.setResourceName(WoaDefinitions.FOOD);

        if (tribe.getResources().getStorageSpaceLeft() <= 0) {
            return gainedResourcesList;

        } else if (tribe.getResources().getStorageSpaceLeft() < WoaDefinitions.FARM_EXPLOIT_QUANTITY) {
            gainedFood.setAmount(tribe.getResources().getStorageSpaceLeft());
        } else {
            gainedFood.setAmount(WoaDefinitions.FARM_EXPLOIT_QUANTITY);
        }

        gainedResourcesList.add(gainedFood);

        return gainedResourcesList;
    }

    private List<GainedResource> computeGainedOre(Tribe tribe, Resource mine) {
        List<GainedResource> gainedResourcesList = new ArrayList();

        GainedResource gainedGold = new GainedResource();
        gainedGold.setResourceName(WoaDefinitions.GOLD);

        GainedResource gainedStone = new GainedResource();
        gainedStone.setResourceName(WoaDefinitions.STONE);

        int oreExploitQuantity;

        if (mine.getResourceAmount() >= WoaDefinitions.ORE_EXPLOIT_QUANTITY) {
            oreExploitQuantity = WoaDefinitions.FOREST_EXPLOIT_QUANTITY;
        } else {
            oreExploitQuantity = mine.getResourceAmount();
        }

        if (tribe.getResources().getStorageSpaceLeft() <= 0) {
            return gainedResourcesList;
        } else if (tribe.getResources().getStorageSpaceLeft() < oreExploitQuantity) {
            oreExploitQuantity = tribe.getResources().getStorageSpaceLeft();
        }

        gainedGold.setAmount((mine.getGoldPercentage() * oreExploitQuantity) / 100);
        gainedStone.setAmount(oreExploitQuantity - gainedGold.getAmount());

        gainedResourcesList.add(gainedGold);
        gainedResourcesList.add(gainedStone);

        return gainedResourcesList;
    }

    private List<GainedResource> computeGainedWood(Tribe tribe, Resource forest) {
        List<GainedResource> gainedResourcesList = new ArrayList();

        GainedResource gainedWood = new GainedResource();
        gainedWood.setResourceName(WoaDefinitions.WOOD);

        int forestExploitQuantity;

        if (forest.getResourceAmount() >= WoaDefinitions.FOREST_EXPLOIT_QUANTITY) {
            forestExploitQuantity = WoaDefinitions.FOREST_EXPLOIT_QUANTITY;
        } else {
            forestExploitQuantity = forest.getResourceAmount();
        }

        if (tribe.getResources().getStorageSpaceLeft() <= 0) {
            return gainedResourcesList;
        } else if (tribe.getResources().getStorageSpaceLeft() < forestExploitQuantity) {
            gainedWood.setAmount(tribe.getResources().getStorageSpaceLeft());
        } else {
            gainedWood.setAmount(forestExploitQuantity);
        }

        gainedResourcesList.add(gainedWood);

        return gainedResourcesList;
    }

    private Action getExploitAction(List<GainedResource> gainedResources) {
        jade.util.leap.List gainedResourcesList = new jade.util.leap.ArrayList();

        gainedResources.forEach(res -> gainedResourcesList.add(res));

        ExploitResource exploitResource = new ExploitResource();
        exploitResource.setResourceList(gainedResourcesList);

        return new Action(woaAgent.getAID(), exploitResource);
    }

    private void returnGainedResources(List<GainedResource> gainedResources, MapCell unitPosition) {
        int exploitedResourceQuantity = gainedResources.stream()
                .map(res -> res.getAmount())
                .collect(Collectors.summingInt(Integer::intValue));

        if (unitPosition.getContent() instanceof Resource) {
            Resource resourceCell = (Resource) unitPosition.getContent();
            resourceCell.setResourceAmount(resourceCell.getResourceAmount()
                    + exploitedResourceQuantity);
        }
    }

    private void depleteResources(MapCell unitPosition) {
        if (unitPosition.getContent() instanceof Resource) {
            Resource resourceCell = (Resource) unitPosition.getContent();
            if (resourceCell.getResourceAmount() <= 0) {
                unitPosition.setContent(new Ground());
                knownPositionInformer.informAboutKnownCellDetail(unitPosition);
                gui.depleteResource(unitPosition.getXCoord(), unitPosition.getYCoord());
            }
        }
    }

    private void gainResources(Tribe ownerTribe, Unit requesterUnit
            , List<GainedResource> gainedResources) {
        
        gainedResources.forEach(resource -> {
            addResourcesToTribe(ownerTribe.getResources(), resource);
            gui.gainResource(ownerTribe.getAID().getLocalName(), requesterUnit.getId().getLocalName()
                    , resource.getResourceName(), resource.getAmount());
        });
    }

    protected void addResourcesToTribe(TribeResources tribeResources, GainedResource resource) {
        switch (resource.getResourceName()) {
            case WoaDefinitions.FOOD:
                tribeResources.addFood(resource.getAmount());
                break;
            case WoaDefinitions.WOOD:
                tribeResources.addWood(resource.getAmount());
                break;
            case WoaDefinitions.STONE:
                tribeResources.addStone(resource.getAmount());
                break;
            case WoaDefinitions.GOLD:
                tribeResources.addGold(resource.getAmount());
                break;
            default:
                woaAgent.log(Level.WARNING, "Unknown resource name " + resource.getResourceName());
                break;
        }
    }

    private boolean canExploitResource(Tribe tribe, Unit requester, MapCell requesterPosition) {
        if (requesterPosition.getContent() instanceof Building) {
            Building farm = (Building) requesterPosition.getContent();
            return farm.getType().equals(WoaDefinitions.FARM) && farm.getOwner().equals(tribe.getAID());
        }

        if (requesterPosition.getContent() instanceof Resource) {
            Resource res = (Resource) requesterPosition.getContent();
            return res.getResourceAmount() > 0;
        }

        return false;
    }

    public interface OnExploitedResourceHandler {

        void onExploitedResource();

        void onCouldNotExploitResource();

    }
}
