/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package es.upm.woa.group1.agent.world;

import es.upm.woa.group1.WoaDefinitions;
import es.upm.woa.group1.agent.TransactionRecord;
import es.upm.woa.group1.agent.Tribe;
import es.upm.woa.group1.agent.Unit;
import es.upm.woa.group1.agent.WoaAgent;
import es.upm.woa.group1.gui.WoaGUI;
import es.upm.woa.group1.map.GameMap;
import es.upm.woa.group1.map.MapCell;
import es.upm.woa.group1.protocol.CommunicationStandard;
import es.upm.woa.group1.protocol.Conversation;
import es.upm.woa.group1.protocol.DelayedTransactionalBehaviour;
import es.upm.woa.ontology.Building;
import es.upm.woa.ontology.CreateUnit;
import es.upm.woa.ontology.ExploitResource;
import es.upm.woa.ontology.GainedResource;
import es.upm.woa.ontology.GameOntology;
import es.upm.woa.ontology.Resource;
import jade.content.onto.basic.Action;
import jade.core.behaviours.Behaviour;
import jade.lang.acl.ACLMessage;
import jade.util.leap.ArrayList;
import jade.util.leap.List;
import java.util.NoSuchElementException;
import java.util.logging.Level;

/**
 *
 * @author juanpamz
 */
public class ExploitResourceBehaviourHelper {
    private static final int EXPLOIT_ORE_TICKS = 8;
    private static final int EXPLOIT_FARM_TICKS = 24;
    private static final int EXPLOIT_FOREST_TICKS = 6;
    
    private final WoaAgent woaAgent;
    private final CommunicationStandard comStandard;
    private final GameMap worldMap;
    private final WoaGUI gui;
    
    private final TransactionRecord transactionRecord;
    private final TribeInfomationBroker tribeInfomationBroker;
    private final UnitMovementInformer unitMovementInformer;
    private final CreateUnitBehaviourHelper.UnitCreator unitCreator;
    
    
    public ExploitResourceBehaviourHelper(WoaAgent woaAgent
            , CommunicationStandard comStandard, GameMap worldMap
            , TransactionRecord activeTransactions
            , WoaGUI gui
            , TribeInfomationBroker tribeInfomationBroker
            , UnitMovementInformer unitMovementInformer
            , CreateUnitBehaviourHelper.UnitCreator unitCreator) {
        this.woaAgent = woaAgent;
        this.comStandard = comStandard;
        this.worldMap = worldMap;
        this.transactionRecord = activeTransactions;
        this.gui = gui;
        this.tribeInfomationBroker = tribeInfomationBroker;
        this.unitMovementInformer = unitMovementInformer;
        this.unitCreator = unitCreator;
    }
    
    public Behaviour startExploitResourcesBehaviour() {
        Behaviour newBehaviour = new Conversation(woaAgent, comStandard
               , GameOntology.EXPLOITRESOURCE) {
            @Override
            public void onStart() {

                listenMessages(new Conversation.ResponseHandler() {
                    @Override
                    public void onRequest(ACLMessage message) {
                        final Action exploitResourceAction
                                = new Action(woaAgent.getAID(), new ExploitResource());
                        woaAgent.log(Level.FINER, "received exploit resource request from"
                                + message.getSender().getLocalName());

                        final Tribe ownerTribe = tribeInfomationBroker
                                .findOwnerTribe(message.getSender());
                        Unit requesterUnit = tribeInfomationBroker
                                .findUnit(ownerTribe, message.getSender());
                        if (ownerTribe == null || requesterUnit == null) {
                            respondMessage(message, ACLMessage.REFUSE, exploitResourceAction);
                            return;
                        }

                        try {
                            MapCell unitPosition = worldMap.getCellAt(requesterUnit
                                    .getCoordX(), requesterUnit.getCoordY());

                            if (!canExploitResource(ownerTribe, requesterUnit,
                                     unitPosition)) {
                                respondMessage(message, ACLMessage.REFUSE, exploitResourceAction);
                            } else {
                                initiateExploitResource(requesterUnit, ownerTribe, unitPosition, message);
                            }

                        } catch (NoSuchElementException ex) {
                            woaAgent.log(Level.WARNING, "Unit "
                                    + requesterUnit.getId().getLocalName() + " is at an unknown position");
                            respondMessage(message, ACLMessage.REFUSE, exploitResourceAction);
                        }
                    }
                });
            }

            private void initiateExploitResource(Unit requesterUnit, Tribe ownerTribe, MapCell unitPosition, ACLMessage message) {
                final Action exploitResourceAction
                                = new Action(woaAgent.getAID(), new ExploitResource());
                
                
                respondMessage(message, ACLMessage.AGREE, exploitResourceAction);
                
                
                int exploitResourceTicks;

                if (unitPosition.getContent() instanceof Building){
                    exploitResourceTicks = EXPLOIT_FARM_TICKS;
                    
                }else{
                    final Resource res = (Resource) unitPosition.getContent();
                
                    if (res.getResourceType().equals(WoaDefinitions.ORE)){
                        exploitResourceTicks = EXPLOIT_ORE_TICKS;

                    }else{
                        exploitResourceTicks = EXPLOIT_FOREST_TICKS;
                    }
                }
                
                
                
                DelayedTransactionalBehaviour activeTransaction
                        = createExploitResourceTransaction(exploitResourceTicks, ownerTribe, message, exploitResourceAction);

                transactionRecord.addTransaction(activeTransaction);
                woaAgent.addBehaviour(activeTransaction);
            }

            private DelayedTransactionalBehaviour createExploitResourceTransaction(int exploitResourceTicks, Tribe ownerTribe, ACLMessage message, final Action exploitResourceAction) {
                
                
                
                        
                DelayedTransactionalBehaviour activeTransaction
                        = new DelayedTransactionalBehaviour(myAgent, exploitResourceTicks) {
                            
                            boolean finished = false;
                            
                            @Override
                            public boolean done() {
                                return finished;
                            }
                            
                            @Override
                            public void commit() {
                                
                                if (!finished) {
                                    
                                }
                                
                                finished = true;
                            }
                            
                            @Override
                            public void rollback() {
                                if (!finished) {
                                    woaAgent.log(Level.INFO, "canceled resource exploitation. "
                                            + ownerTribe.getAID().getLocalName());
                                    respondMessage(message, ACLMessage.FAILURE, exploitResourceAction);
                                }
                                finished = true;
                            }
                        };
                return activeTransaction;
            }
            
        };
            
        woaAgent.addBehaviour(newBehaviour);
        
        return newBehaviour;
    }
    
    private List computeGainedFood(Tribe tribe, Building farm){
        List gainedResourcesList = new ArrayList();
        
        GainedResource gainedFood = new GainedResource();
        gainedFood.setResourceName(WoaDefinitions.FOOD);
        
        if (tribe.getResources().getStorageSpaceLeft() <= 0){
            return gainedResourcesList;
            
        }else if(tribe.getResources().getStorageSpaceLeft() < WoaDefinitions.FARM_EXPLOIT_QUANTITY){
            gainedFood.setAmount(tribe.getResources().getStorageSpaceLeft());
        }else{
            gainedFood.setAmount(WoaDefinitions.FARM_EXPLOIT_QUANTITY);
        }
        
        gainedResourcesList.add(gainedFood);
        
        return gainedResourcesList;
    }
    
    private List computeGainedOre(Tribe tribe, Resource mine){
        List gainedResourcesList = new ArrayList();
        
        GainedResource gainedGold = new GainedResource();
        gainedGold.setResourceName(WoaDefinitions.GOLD);
        
        GainedResource gainedStone = new GainedResource();
        gainedStone.setResourceName(WoaDefinitions.STONE);
        
        
        int oreExploitQuantity;
        
        if (mine.getResourceAmount() >= WoaDefinitions.ORE_EXPLOIT_QUANTITY){
            oreExploitQuantity = WoaDefinitions.FOREST_EXPLOIT_QUANTITY;
        }else{
            oreExploitQuantity = mine.getResourceAmount();
        }
        
        if (tribe.getResources().getStorageSpaceLeft() <= 0){
            return gainedResourcesList;
        }else if(tribe.getResources().getStorageSpaceLeft() < oreExploitQuantity){
            oreExploitQuantity = tribe.getResources().getStorageSpaceLeft();
        }
        
        gainedGold.setAmount((mine.getGoldPercentage() * oreExploitQuantity )/100);
        gainedStone.setAmount(oreExploitQuantity - gainedGold.getAmount());
                
        gainedResourcesList.add(gainedGold);
        gainedResourcesList.add(gainedStone);
        
        return gainedResourcesList;
    }
    
    private List computeGainedWood(Tribe tribe, Resource forest){
        List gainedResourcesList = new ArrayList();
        
        GainedResource gainedWood = new GainedResource();
        gainedWood.setResourceName(WoaDefinitions.WOOD);
        
        int forestExploitQuantity;
        
        if (forest.getResourceAmount() >= WoaDefinitions.FOREST_EXPLOIT_QUANTITY){
            forestExploitQuantity = WoaDefinitions.FOREST_EXPLOIT_QUANTITY;
        }else{
            forestExploitQuantity = forest.getResourceAmount();
        }
        
        if (tribe.getResources().getStorageSpaceLeft() <= 0){
            return gainedResourcesList;
        }else if(tribe.getResources().getStorageSpaceLeft() < forestExploitQuantity){
            gainedWood.setAmount(tribe.getResources().getStorageSpaceLeft());
        }else{
            gainedWood.setAmount(forestExploitQuantity);
        }
        
        gainedResourcesList.add(gainedWood);
        
        return gainedResourcesList;
    }
    
    
    private boolean canExploitResource(Tribe tribe, Unit requester, MapCell requesterPosition) {

        if (UnitCellPositioner.getInstance().isMoving(requester)) {
            return false;
        }
        
        if (requesterPosition.getContent() instanceof Building) {
            Building farm = (Building) requesterPosition.getContent();
            return farm.getType().equals(WoaDefinitions.FARM) && farm.getOwner().equals(tribe.getAID());
        }
        
        if (requesterPosition.getContent() instanceof Resource) {
            Resource res = (Resource) requesterPosition.getContent();
            return res.getResourceAmount() > 0;
        }
        
        return false;
    }
    
    public interface OnExploitedResourceHandler {
        
        void onExploitedResource();
        
        void onCouldNotExploitResource();
        
    }
}
